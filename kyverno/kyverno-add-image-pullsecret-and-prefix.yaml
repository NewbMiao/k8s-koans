apiVersion: v1
kind: ConfigMap
metadata:
  name: allowed-namespaces
  namespace: kyverno
data:
  namespaces: |
    - app-mutate
    - app1
    - app2
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJ0ZXN0LmNvbSI6eyJ1c2VybmFtZSI6Im5ld2JtaWFvIiwicGFzc3dvcmQiOiJ0ZXN0cHdkIiwiYXV0aCI6ImJtVjNZbTFwWVc4NmRHVnpkSEIzWkE9PSJ9fX0=
kind: Secret
metadata:
  name: my-secret
  namespace: kyverno
type: kubernetes.io/dockerconfigjson
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kyverno:sync-secrets-background-controller
  labels:
    rbac.kyverno.io/aggregate-to-background-controller: "true"
rules:
  - apiGroups:
      - "*"
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kyverno:sync-secrets-admission-controller
  labels:
    rbac.kyverno.io/aggregate-to-admission-controller: "true"
rules:
  - apiGroups:
      - "*"
    resources:
      - secrets
    verbs:
      - get
      - list
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: sync-secrets
  namespace: kyverno
  annotations:
    policies.kyverno.io/title: Sync Secrets
    policies.kyverno.io/category: Sample
    policies.kyverno.io/subject: Secret
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      Secrets like registry credentials often need to exist in multiple
      Namespaces so Pods there have access. Manually duplicating those Secrets
      is time consuming and error prone. This policy will copy a
      Secret called `my-secret` which exists in the `default` Namespace to
      new Namespaces when they are created. It will also push updates to
      the copied Secrets should the source Secret be changed.
spec:
  rules:
    - name: sync-image-pull-secret
      match:
        any:
          - resources:
              kinds:
                - Namespace
      context:
        - name: allowed-namespaces
          configMap:
            name: allowed-namespaces
            namespace: kyverno
      preconditions:
        any:
          - key: "{{request.object.metadata.name}}"
            operator: AnyIn
            value: '{{ "allowed-namespaces".data.namespaces | parse_yaml(@) }}' #["app1", "app2", "app3"]
      generate:
        apiVersion: v1
        kind: Secret
        name: my-secret
        namespace: "{{request.object.metadata.name}}"
        synchronize: true
        clone:
          namespace: kyverno
          name: my-secret
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: replace-image-registry
  annotations:
    policies.kyverno.io/title: Replace Image Registry With Harbor
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.11.4
    kyverno.io/kubernetes-version: "1.27"
    policies.kyverno.io/description: >-
      Some registries like Harbor offer pull-through caches for images from certain registries.
      Images can be re-written to be pulled from the redirected registry instead of the original and
      the registry will proxy pull the image, adding it to its internal cache.
      The imageData context variable in this policy provides a normalized view
      of the container image, allowing the policy to make decisions based on various 
      "live" image details. As a result, it requires access to the source registry and the existence
      of the target image to verify those details.
spec:
  rules:
    - name: redirect-docker
      match:
        any:
          - resources:
              kinds:
                - Pod
              operations:
                - CREATE
                - UPDATE
      mutate:
        foreach:
          - list: request.object.spec.initContainers[]
            context:
              - name: imageData
                imageRegistry:
                  reference: "{{ element.image }}"
            preconditions:
              any:
                - key: "{{imageData.registry}}"
                  operator: Equals
                  value: index.docker.io
            patchStrategicMerge:
              spec:
                imagePullSecrets:
                  - name: my-secret
                initContainers:
                  - name: "{{ element.name }}"
                    image: harbor.example.com/k8s/{{replace_all('{{imageData.repository}}','library/','')}}:{{imageData.identifier}}
          - list: request.object.spec.containers[]
            context:
              - name: imageData
                imageRegistry:
                  reference: "{{ element.image }}"
            preconditions:
              any:
                - key: "{{imageData.registry}}"
                  operator: Equals
                  value: index.docker.io
            patchStrategicMerge:
              spec:
                imagePullSecrets:
                  - name: my-secret
                containers:
                  - name: "{{ element.name }}"
                    image: harbor.example.com/k8s/{{replace_all('{{imageData.repository}}','library/','')}}:{{imageData.identifier}}
